#!/usr/bin/env python
"""
Convert from and to HDF5
"""

import sys, os, getopt
import ml2h5.converter
from ml2h5.converter import TO_H5,FROM_H5
from optparse import OptionParser


def oParse():
    parser=OptionParser()
    parser.add_option('-s','--seperator',dest='seperator',help='Seperator to use to seperate variables in examples. Default is ","',default=None)
    parser.add_option('-v', '--verify',action='store_true',dest='verify',help='Verify the converted data',default=False)
    parser.add_option('-f', '--first-line-attribute-names',action='store_true',dest='attribute_names_first',help='First line contains attributes names (for CSV)',default=False)
    parser.add_option('-t', '--type',dest='type',help='File type to convert, can either be data or task',default='data')
    parser.add_option('-i', '--format-in',dest='format_in',help='File format of in-file (if auto-detection fails)',default=None)
    parser.add_option('-o', '--format-out',dest='format_out',help='File format of out-file (if auto-detection fails)',default=None)
    parser.add_option('-m', '--merge-data',action='store_true',dest='merge',help='',default=False)
    parser.add_option('-n', '--no-conversion',action='store_false',dest='convert',help='',default=True)
    
    msg=[sys.argv[0] + """ [options] <in-filename> <out-filename>")

    Convert <in-filename> to <out-filename>.

The following types are supported:"""]
    for item in TO_H5:
        msg.append('    ' + item + ' -> ' + 'h5')
    msg.append('')
    for item in FROM_H5:
        msg.append('    h5 -> ' + item)


    parser.set_usage("\n".join(msg))
    return parser


class Options:
    """Option.

    Should not be instantiated.

    @cvar seperator: seperator to seperate variables in examples
    @type output: string
    @cvar verify: if converted data shall be verified against input data
    @type verify: boolean
    @cvar attribute_names_first: if first line in CSV files shall be treated as attribute names
    @type attribute_names_first: boolean
    @cvar format_in: file format of in-file
    @type format_in: string
    @cvar format_out: file format of out-file
    @type format_out: string
    """
    seperator = None
    verify = False
    attribute_names_first = False
    format_in = None
    format_out = None
    merge = False
    type = None


def rm_opt(option, value=None):
    """Remove given option and value from sys.argv.

    @param option: option to remove
    @type option: string
    @param value: value to remove
    @type value: string
    """
    if not value:
        sys.argv.remove(option)
        return

    try:
        sys.argv.remove(option + value)
    except ValueError:
        try:
            sys.argv.remove(option)
            sys.argv.remove(value)
        except ValueError:
            sys.argv.remove(option + '=' + value)

if __name__ == "__main__":
    op=oParse()
    (Options,args)=op.parse_args()

    if len(args)!=2:
        op.print_help()
        sys.exit(1)

    if Options.format_in == 'h5':
        seperator = None
    elif Options.seperator:
        seperator = Options.seperator
    else:
        seperator = ml2h5.fileformat.infer_seperator(args[0])

    try:
        c = ml2h5.converter.Converter(
            args[0], args[1],
            format_in=Options.format_in, format_out=Options.format_out,
            seperator=seperator,
            attribute_names_first=Options.attribute_names_first,
            merge=Options.merge,
            type=Options.type
        )
        if Options.convert:
            c.run(verify=Options.verify)
            if Options.verify:
                c.verify()    
    except ml2h5.converter.ConversionError as e:
        e.print_error()
        sys.exit(1)
